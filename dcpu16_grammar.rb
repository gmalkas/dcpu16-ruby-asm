# Autogenerated from a Treetop grammar. Edits may be lost.


module Dcpu16Asm
  include Treetop::Runtime

  def root
    @root ||= :program
  end

  def _nt_program
    start_index = index
    if node_cache[:program].has_key?(index)
      cached = node_cache[:program][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_instruction
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Program,input, i0...index, s0)
    end

    node_cache[:program][start_index] = r0

    r0
  end

  module Instruction0
    def comment
      elements[0]
    end

  end

  module Instruction1
  end

  def _nt_instruction
    start_index = index
    if node_cache[:instruction].has_key?(index)
      cached = node_cache[:instruction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r4 = _nt_label
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        i5 = index
        r6 = _nt_basic_instruction
        if r6
          r5 = r6
        else
          r7 = _nt_non_basic_instruction
          if r7
            r5 = r7
          else
            i8, s8 = index, []
            r9 = _nt_comment
            s8 << r9
            if r9
              s10, i10 = [], index
              loop do
                r11 = _nt_newline
                if r11
                  s10 << r11
                else
                  break
                end
              end
              if s10.empty?
                @index = i10
                r10 = nil
              else
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              end
              s8 << r10
            end
            if s8.last
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              r8.extend(Instruction0)
            else
              @index = i8
              r8 = nil
            end
            if r8
              r5 = r8
            else
              @index = i5
              r5 = nil
            end
          end
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(Instruction,input, i0...index, s0)
      r0.extend(Instruction1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instruction][start_index] = r0

    r0
  end

  module BasicInstruction0
    def basic_instruction_type
      elements[1]
    end

    def value1
      elements[3]
    end

    def value2
      elements[6]
    end

  end

  def _nt_basic_instruction
    start_index = index
    if node_cache[:basic_instruction].has_key?(index)
      cached = node_cache[:basic_instruction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_basic_instruction_type
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r6 = _nt_value
          s0 << r6
          if r6
            if has_terminal?(',', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(',')
              r7 = nil
            end
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                r10 = _nt_value
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r14 = _nt_comment
                    if r14
                      r13 = r14
                    else
                      r13 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r13
                    if r13
                      s15, i15 = [], index
                      loop do
                        r16 = _nt_space
                        if r16
                          s15 << r16
                        else
                          break
                        end
                      end
                      r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                      s0 << r15
                      if r15
                        s17, i17 = [], index
                        loop do
                          r18 = _nt_newline
                          if r18
                            s17 << r18
                          else
                            break
                          end
                        end
                        if s17.empty?
                          @index = i17
                          r17 = nil
                        else
                          r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                        end
                        s0 << r17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(BasicInstruction,input, i0...index, s0)
      r0.extend(BasicInstruction0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:basic_instruction][start_index] = r0

    r0
  end

  def _nt_basic_instruction_type
    start_index = index
    if node_cache[:basic_instruction_type].has_key?(index)
      cached = node_cache[:basic_instruction_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('SET', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('SET')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(BasicInstructionType)
    else
      if has_terminal?('ADD', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('ADD')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(BasicInstructionType)
      else
        if has_terminal?('SUB', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('SUB')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(BasicInstructionType)
        else
          if has_terminal?('MUL', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('MUL')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(BasicInstructionType)
          else
            if has_terminal?('DIV', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure('DIV')
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(BasicInstructionType)
            else
              if has_terminal?('MOD', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure('MOD')
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(BasicInstructionType)
              else
                if has_terminal?('SHL', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('SHL')
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(BasicInstructionType)
                else
                  if has_terminal?('SHR', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure('SHR')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                    r0.extend(BasicInstructionType)
                  else
                    if has_terminal?('AND', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure('AND')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                      r0.extend(BasicInstructionType)
                    else
                      if has_terminal?('BOR', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure('BOR')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                        r0.extend(BasicInstructionType)
                      else
                        if has_terminal?('XOR', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                          @index += 3
                        else
                          terminal_parse_failure('XOR')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                          r0.extend(BasicInstructionType)
                        else
                          if has_terminal?('IFE', false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            @index += 3
                          else
                            terminal_parse_failure('IFE')
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                            r0.extend(BasicInstructionType)
                          else
                            if has_terminal?('IFN', false, index)
                              r13 = instantiate_node(SyntaxNode,input, index...(index + 3))
                              @index += 3
                            else
                              terminal_parse_failure('IFN')
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                              r0.extend(BasicInstructionType)
                            else
                              if has_terminal?('IFG', false, index)
                                r14 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                @index += 3
                              else
                                terminal_parse_failure('IFG')
                                r14 = nil
                              end
                              if r14
                                r0 = r14
                                r0.extend(BasicInstructionType)
                              else
                                if has_terminal?('IFB', false, index)
                                  r15 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                  @index += 3
                                else
                                  terminal_parse_failure('IFB')
                                  r15 = nil
                                end
                                if r15
                                  r0 = r15
                                  r0.extend(BasicInstructionType)
                                else
                                  @index = i0
                                  r0 = nil
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:basic_instruction_type][start_index] = r0

    r0
  end

  module NonBasicInstruction0
    def non_basic_instruction_type
      elements[1]
    end

    def value
      elements[3]
    end

  end

  def _nt_non_basic_instruction
    start_index = index
    if node_cache[:non_basic_instruction].has_key?(index)
      cached = node_cache[:non_basic_instruction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      r3 = _nt_non_basic_instruction_type
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          r6 = _nt_value
          s0 << r6
          if r6
            r8 = _nt_comment
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              s9, i9 = [], index
              loop do
                r10 = _nt_space
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s0 << r9
              if r9
                s11, i11 = [], index
                loop do
                  r12 = _nt_newline
                  if r12
                    s11 << r12
                  else
                    break
                  end
                end
                if s11.empty?
                  @index = i11
                  r11 = nil
                else
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                end
                s0 << r11
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonBasicInstruction0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:non_basic_instruction][start_index] = r0

    r0
  end

  def _nt_non_basic_instruction_type
    start_index = index
    if node_cache[:non_basic_instruction_type].has_key?(index)
      cached = node_cache[:non_basic_instruction_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('JSR', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('JSR')
      r0 = nil
    end

    node_cache[:non_basic_instruction_type][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(';', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(';')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_newline
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Comment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_register
    if r1
      r0 = r1
    else
      r2 = _nt_memory_value
      if r2
        r0 = r2
      else
        r3 = _nt_label_name
        if r3
          r0 = r3
        else
          if has_terminal?('POP', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('POP')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('PEEK', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('PEEK')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('PUSH', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('PUSH')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('SP', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('SP')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('PC', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('PC')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('O', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('O')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      r10 = _nt_hexadecimal
                      if r10
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  def _nt_register
    start_index = index
    if node_cache[:register].has_key?(index)
      cached = node_cache[:register][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('A', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('A')
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Register)
    else
      if has_terminal?('B', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('B')
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Register)
      else
        if has_terminal?('C', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('C')
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Register)
        else
          if has_terminal?('X', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('X')
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Register)
          else
            if has_terminal?('Y', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('Y')
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Register)
            else
              if has_terminal?('Z', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('Z')
                r6 = nil
              end
              if r6
                r0 = r6
                r0.extend(Register)
              else
                if has_terminal?('I', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('I')
                  r7 = nil
                end
                if r7
                  r0 = r7
                  r0.extend(Register)
                else
                  if has_terminal?('J', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('J')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                    r0.extend(Register)
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:register][start_index] = r0

    r0
  end

  module MemoryValue0
    def address
      elements[0]
    end

    def register
      elements[2]
    end
  end

  module MemoryValue1
  end

  def _nt_memory_value
    start_index = index
    if node_cache[:memory_value].has_key?(index)
      cached = node_cache[:memory_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_register
      if r3
        r2 = r3
      else
        r4 = _nt_address
        if r4
          r2 = r4
        else
          i5, s5 = index, []
          r6 = _nt_address
          s5 << r6
          if r6
            if has_terminal?('+', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('+')
              r7 = nil
            end
            s5 << r7
            if r7
              r8 = _nt_register
              s5 << r8
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(MemoryValue0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MemoryValue1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:memory_value][start_index] = r0

    r0
  end

  def _nt_address
    start_index = index
    if node_cache[:address].has_key?(index)
      cached = node_cache[:address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_hexadecimal

    node_cache[:address][start_index] = r0

    r0
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
      if s0.size == 5
        break
      end
    end
    if s0.size < 1
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  module Hexadecimal0
  end

  def _nt_hexadecimal
    start_index = index
    if node_cache[:hexadecimal].has_key?(index)
      cached = node_cache[:hexadecimal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("0x", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("0x")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9a-fA-F]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 4
          break
        end
      end
      if s2.size < 1
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Hexadecimal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:hexadecimal][start_index] = r0

    r0
  end

  module Literal0
  end

  def _nt_literal
    start_index = index
    if node_cache[:literal].has_key?(index)
      cached = node_cache[:literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("0x", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("0x")
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?("0", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("0")
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?("1", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("1")
          r4 = nil
        end
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        if has_terminal?('\G[0-9a-fA-F]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Literal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:literal][start_index] = r0

    r0
  end

  module Label0
    def label_name
      elements[0]
    end

  end

  def _nt_label
    start_index = index
    if node_cache[:label].has_key?(index)
      cached = node_cache[:label][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_label_name
    s0 << r1
    if r1
      if has_terminal?(':', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(LabelDeclaration,input, i0...index, s0)
      r0.extend(Label0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:label][start_index] = r0

    r0
  end

  def _nt_label_name
    start_index = index
    if node_cache[:label_name].has_key?(index)
      cached = node_cache[:label_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Label,input, i0...index, s0)
    end

    node_cache[:label_name][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?(' ', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(' ')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\t", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\t")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_newline
    start_index = index
    if node_cache[:newline].has_key?(index)
      cached = node_cache[:newline][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\r\n", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\r\n")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:newline][start_index] = r0

    r0
  end

end

class Dcpu16AsmParser < Treetop::Runtime::CompiledParser
  include Dcpu16Asm
end

