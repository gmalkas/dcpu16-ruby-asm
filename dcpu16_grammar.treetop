grammar Dcpu16Asm

  rule program
    instruction+ <Program>
  end
  
  rule instruction
    space* label? (basic_instruction / non_basic_instruction / (comment newline+)) <Instruction>
  end
  
  rule basic_instruction
    space* basic_instruction_type space* value ',' space* value space* comment? space* newline+ <BasicInstruction>
  end

  rule basic_instruction_type
    ('SET' / 'ADD' / 'SUB' / 'MUL' / 'DIV' / 'MOD' / 'SHL' / 'SHR' / 'AND' / 'BOR' / 'XOR' / 'IFE' / 'IFN' / 'IFG' / 'IFB') <BasicInstructionType>
  end
  
  rule non_basic_instruction
    space* non_basic_instruction_type space* value comment? space* newline+
  end

  rule non_basic_instruction_type
    'JSR'
  end

  rule comment
    ';' (!newline .)*
  end

  rule value
    register <Register>
    / memory_value <MemoryValue>
    / label_name <Label>
    / ('POP' / 'PEEK' / 'PUSH') <Stack>
    / 'O' <Flag>
    / integer <Literal>
  end

  rule register
    ('A' / 'B' / 'C' / 'X' / 'Y' / 'Z' / 'I' / 'J' / 'SP' / 'PC') <Register>
  end

  rule memory_value
    '[' space* ((address (space* "+" space* register)?) / (register (space* "+" space* address)?)) space* ']'
  end

  rule address
    integer <Literal>
  end

  rule integer
    (!"0x" [0-9] 1..5) / "0x" ([0-9a-fA-F] 1..4)
  end

  rule label
    ':' label_name <LabelDeclaration>
  end

  rule label_name
    [a-z]+
  end

  rule space
    ' ' / "\t"
  end

  rule newline
    "\r\n" / "\n"
  end
end
